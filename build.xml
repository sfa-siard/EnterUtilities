<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- build.xml =========================================================
ANT build file of EnterUtils
Application: EnterUtils
Description: ANT build file of EnterUtils
Platform   : JAVA, ANT
========================================================================
Copyright  : 2016, Enter AG, RÃ¼ti ZH, Switzerland
Created    : 09.05.2016, Hartwig Thomas
==================================================================== -->
<project basedir="." default="build" name="enterutils">
  <!-- build properties contain local settings. They must reside in
	   the same folder as this build.xml. Use build.properties.template
	   as a guide for creating the local copy.
  -->
  <property file="build.properties"/>
  <property name="debuglevel" value="source,lines,vars"/>
  <property name="target" value="1.8"/>
  <property name="source" value="1.8"/>
  <!-- the main folders of the project -->
  <property name="dirsrc" value="src"/>
  <property name="dirtest" value="test/"/>
  <property name="dirlib" value="lib"/>
  <property name="dirdoc" value="doc"/>
  <property name="diretc" value="etc"/>
  <property name="dirtmp" value="tmp"/>
  <property name="dirdist" value="dist"/>
  <property name="dirjavadoc" value="${dirdoc}/javadoc"/>

  <!-- delete build folders -->
  <property name="dirbuild" value="build"/>
  <property name="dirbuildclasses" value="${dirbuild}/classes"/>
  <property name="dirbuildtests" value="${dirbuild}/tests"/>
  <target name="clean">
    <echo message="${ant.project.name}: clean"/>
    <delete dir="${dirbuildclasses}"/>
    <delete dir="${dirbuildtests}"/>
    <delete dir="${dirtmp}"/>
    <delete dir="${dirdist}"/>
    <delete dir="${dirjavadoc}"/>
  </target>
  
  <!-- create build folders -->
  <target name="init" depends="clean">
    <echo message="${ant.project.name}: init"/>
    <mkdir dir="${dirbuild}"/>
    <mkdir dir="${dirbuildclasses}"/>
    <mkdir dir="${dirbuildtests}"/>
    <mkdir dir="${dirtmp}"/>
    <mkdir dir="${dirdist}"/>
    <mkdir dir="${dirjavadoc}"/>
  </target>
  
  <!-- check if mainfest and local build properties are available -->
  <property name="filemanifest" value="${dirsrc}/META-INF/MANIFEST.MF"/>
  <property name="filerevoldproperties" value="${dirtmp}/revold.properties"/>
  <property name="filegithead" value=".git/HEAD"/>
  <property name="filebranchproperties" value="${dirtmp}/branch.properties"/>
  <target name="check">
    <!-- get current date -->
    <tstamp>
      <format property="builtdate" pattern="dd. MMM yyyy" locale="en,CH"/>
    </tstamp>
    <echo message="builddate: ${builtdate}"/>
    <!-- current version and revision are taken from manifest -->
    <copy file="${filemanifest}" tofile="${filerevoldproperties}"/>
    <!-- reduce it to version and revision properties --> 
    <replaceregexp file="${filerevoldproperties}" 
      match=".*Implementation-Version: (\d+\.\d+)\.(\d+).*" 
      replace="version=\1&#x000A;revold=\2"
      flags="gms"/>
    <!-- load the properties -->
    <property file="${filerevoldproperties}"/>
    <echo message="version: ${version}"/>
    <echo message="revold: ${revold}"/>
    <!-- fail if build.properties are not configured -->
    <fail  message="External build.properties not configured correctly!">
      <condition>
        <not>
          <and>
            <isset property="version"/>
            <isset property="revold"/>
            <isset property="java8rtjar"/>
          	<isset property="javadocadd"/>
          </and>
        </not>
      </condition>
    </fail>
    <!-- check .git/HEAD for active branch name -->
    <copy file="${filegithead}" tofile="${filebranchproperties}"/>
    <!-- reduce it to branch property -->
    <replaceregexp file="${filebranchproperties}" 
      match="^ref: refs/heads/(.*)$" 
      replace="branch=\1"
      flags="gms"/>
    <!-- load the property -->
    <property file="${filebranchproperties}"/>
    <!-- compute branch.master -->
    <condition property="branch.master">
      <and>
        <not><isset property="submit"/></not> 
        <equals arg1="${branch}" arg2="master"/>
      </and>
    </condition>
    <echo message="branch: ${branch}"/>
    <echo message="branch.master: ${branch.master}"/>
    <echo message="build.properties.configured: ${build.properties.configured}"/>
  </target>
  
  <!-- commit local work -->
  <property name="fileadd" value="${dirtmp}/add.txt"/>
  <property name="filecommit" value="${dirtmp}/commit.txt"/>
  <target name="commit" depends="check" if="git">
    <echo message="${ant.project.name}: git add -A"/>
    <exec executable="${git}" output="${fileadd}" failonerror="true">
      <arg value="add"/>
      <arg value="-A"/>
    </exec>
    <echo message="${ant.project.name}: git commit -am &quot;${version}.${revold}&quot;"/>
    <exec executable="${git}" output="${filecommit}" resultproperty="resultcommit">
      <arg value="commit"/>
    	<arg value="-am" />
    	<arg value="${version}.${revold}" />
    </exec>
		<fail message="git commit failed!">
			<condition>
				<not>
				  <or>
					  <equals arg1="${resultcommit}" arg2="0"/>
					  <equals arg1="${resultcommit}" arg2="1"/>
				  </or>
	  		</not>
			</condition>
		</fail>
  </target>
  
  <!-- update from remote master -->
  <property name="filepull" value="${dirtmp}/pull.txt"/>
  <target name="pull" depends="commit" if="git">
    <!-- pull master branch
    <echo message="${ant.project.name}: git pull origin master"/>
    <exec executable="${git}" output="${filepull}">
      <arg value="pull"/>
      <arg value="origin"/>
      <arg value="master"/>
    </exec>
    -->
    <!-- pull dev branch -->
    <echo message="${ant.project.name}: git pull origin ${branch}"/>
    <exec executable="${git}" output="${filepull}" failonerror="true">
      <arg value="pull"/>
      <arg value="origin"/>
      <arg value="${branch}"/>
    </exec>
  </target>
  
  <!-- increment revision and update manifest -->
  <property name="filerevisionproperties" value="${dirtmp}/revision.properties"/> 
  <target name="revision" depends="pull">
    <echo message="${ant.project.name}: revision"/>
    <copy file="${filerevoldproperties}" tofile="${filerevisionproperties}" overwrite="true"/>
    <replaceregexp file="${filerevisionproperties}" 
      match="^revold=(.*)$" 
      replace="revision=\1"
      flags="gm"/>
    <propertyfile file="${filerevisionproperties}">
      <entry key="revision" type="int" operation="+" value="1"/>
    </propertyfile>
    <property file="${filerevisionproperties}"/>
    <echo message="revision: ${revision}" />
    <replaceregexp file="${filemanifest}" 
      match="^Implementation-Version: .*$" 
      replace="Implementation-Version: ${version}.${revision}"
      flags="gm"/>
    <replaceregexp file="${filemanifest}" 
      match="^Built-Date: .*$" 
      replace="Built-Date: ${builtdate}"
      flags="gm"/>
  </target>
  
  <!-- build the EnterUtils classes -->
  <target name="build" depends="init,revision">
    <echo message="${ant.project.name}: build"/>
    <!-- without this, the package-info class is not generated! -->
    <touch>
      <fileset dir="${dirsrc}" includes="**/*.*"/>
    </touch>
    <javac debug="true" debuglevel="${debuglevel}"
    	includeantruntime="false"
    	bootclasspath="${java8rtjar}"
      source="${source}" 
      target="${target}"
      encoding="UTF-8"
      srcdir="${dirsrc}"
      destdir="${dirbuildclasses}">
    </javac>
  </target>
  
  <!-- create the JAR file containing all classes -->
  <property name="jarfile" value="${ant.project.name}.jar"/>
  <target name="jar" depends="build">
    <echo message="${ant.project.name}: jar"/>
    <jar jarfile="${dirdist}/${jarfile}"
       manifest="${filemanifest}">
      <fileset dir="${dirbuildclasses}">
        <include name="**/*.class"/>
        <include name="**/res/*.*"/>
      </fileset>
    </jar>
  </target>
	
	<!-- create and run all tests -->
  <property name="classtestsuite" value="ch.enterag.utils._EnterUtilsTestSuite"/>
  <property name="filetests" value="tests"/>
	<target name="test" depends="jar">
    <echo message="${ant.project.name}: tests"/>
		<!-- build the tests -->
    <javac debug="true" debuglevel="${debuglevel}"
    	includeantruntime="false"
      bootclasspath="${java8rtjar}"
      source="${source}" 
      target="${target}"
      encoding="UTF-8"
      srcdir="${dirtest}"
      destdir="${dirbuildtests}">
      <classpath>
        <pathelement path="${dirbuildtests}"/>
        <pathelement path="${dirdist}/${jarfile}"/>
        <pathelement path="${dirlib}/bsh-2.0b4.jar"/>
        <pathelement path="${dirlib}/hamcrest-core-1.3.jar"/>
        <pathelement path="${dirlib}/javassist-3.18.1-GA.jar"/>
        <pathelement path="${dirlib}/jcommander-1.27.jar"/>
        <pathelement path="${dirlib}/junit-4.11.jar"/>
        <pathelement path="${dirlib}/mockito-all-1.9.5.jar"/>
        <pathelement path="${dirlib}/objenesis-2.1.jar"/>
        <pathelement path="${dirlib}/powermock-api-mockito-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-api-mockito-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-api-support-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-api-support-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-classloading-base-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-classloading-base-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-core-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-core-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-common-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-common-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-legacy-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-legacy-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-testng-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-module-testng-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-testng-common-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-reflect-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-reflect-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/snakeyaml-1.12.jar"/>
        <pathelement path="${dirlib}/testng-6.8.7.jar"/>
      </classpath>
    </javac>
		<!-- run the tests -->
    <junit haltonerror="true" haltonfailure="true" fork="true" printsummary="on" dir="${basedir}">
      <sysproperty key="java.util.logging.config.file" value="${diretc}/debug.properties"/>
      <formatter type="plain"/>
      <classpath>
        <pathelement path="${dirbuildtests}"/>
        <pathelement path="${dirdist}/${jarfile}"/>
        <pathelement path="${dirlib}/bsh-2.0b4.jar"/>
        <pathelement path="${dirlib}/hamcrest-core-1.3.jar"/>
        <pathelement path="${dirlib}/javassist-3.18.1-GA.jar"/>
        <pathelement path="${dirlib}/jcommander-1.27.jar"/>
        <pathelement path="${dirlib}/junit-4.11.jar"/>
        <pathelement path="${dirlib}/mockito-all-1.9.5.jar"/>
        <pathelement path="${dirlib}/objenesis-2.1.jar"/>
        <pathelement path="${dirlib}/powermock-api-mockito-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-api-mockito-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-api-support-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-api-support-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-classloading-base-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-classloading-base-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-core-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-core-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-common-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-common-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-legacy-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-module-junit4-legacy-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-testng-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-module-testng-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/powermock-module-testng-common-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-reflect-1.5.4.jar"/>
        <pathelement path="${dirlib}/powermock-reflect-1.5.4-sources.jar"/>
        <pathelement path="${dirlib}/snakeyaml-1.12.jar"/>
        <pathelement path="${dirlib}/testng-6.8.7.jar"/>
      </classpath>
      <test 
      name="${classtestsuite}"
      outfile="${filetests}"
      todir="${dirtmp}"/>
    </junit>
  </target>
	
	<!-- generate the javadocs -->
  <property name="enterutilspackage" value="ch.enterag.utils"/>
  <property name="backgroundpackage" value="ch.enterag.utils.background"/>
  <property name="clipackage" value="ch.enterag.utils.cli"/>
  <property name="configurationpackage" value="ch.enterag.utils.configuration"/>
  <property name="csvpackage" value="ch.enterag.utils.csv"/>
  <property name="databasepackage" value="ch.enterag.utils.database"/>
  <property name="iopackage" value="ch.enterag.utils.io"/>
  <property name="langpackage" value="ch.enterag.utils.lang"/>
  <property name="loggingpackage" value="ch.enterag.utils.logging"/>
  <property name="mimepackage" value="ch.enterag.utils.mime"/>
  <property name="reflectpackage" value="ch.enterag.utils.reflect"/>
  <property name="resourcepackage" value="ch.enterag.utils.resource"/>
  <property name="uuidpackage" value="ch.enterag.utils.uuid"/>
	<property name="packages" value="${enterutilspackage},${backgroundpackage},${clipackage},${configurationpackage},${csvpackage},${databasepackage},${iopackage},${langpackage},${loggingpackage},${mimepackage},${reflectpackage},${resourcepackage},${uuidpackage}"/>
  <target name="javadoc" depends="test">
    <echo message="${ant.project.name}: javadoc"/>
    <javadoc 
    	access="public" 
    	author="true" 
    	additionalparam="${javadocadd}"
    	destdir="${dirjavadoc}" 
    	doctitle="SQL Parser" 
      packagenames="${packages}"
    	nodeprecated="false" 
    	nodeprecatedlist="false" 
    	noindex="false" 
    	nonavbar="false" 
    	notree="false"
    	source="${source}"
    	sourcepath="${dirsrc}"
    	splitindex="true" 
    	use="true" 
    	version="true"/>
  </target>
		
  <!-- create the ZIP file with binaries for Windows and LINUX -->
  <target name="zip" depends="javadoc">
    <echo message="${ant.project.name}: zip"/>
    <zip zipfile="${dirdist}/${ant.project.name}-${version}.${revision}.zip">
      <zipfileset dir="${dirdist}" prefix="${ant.project.name}/${dirlib}">
        <include name="${jarfile}"/>
      </zipfileset>
      <zipfileset dir="${dirdoc}" prefix="${ant.project.name}/${dirdoc}">
        <include name="**/*.*"/>
        <exclude name="developer/**/*.*"/>
      </zipfileset>
      <zipfileset dir="${diretc}" prefix="${ant.project.name}/${diretc}">
        <exclude name="debug.properties"/>
      </zipfileset>
      <zipfileset dir="." prefix="${ant.project.name}">
        <include name="*.txt"/>
      </zipfileset>
    </zip>
  </target>
  
  <!-- deploy to file system -->
  <target name="deploy" if="dirdeploy">
    <echo message="${ant.project.name}: deploy"/>
    <delete dir="${dirdeploy}/${ant.project.name}"/>
    <unzip dest="${dirdeploy}" src="${dirdist}/${ant.project.name}-${version}.${revision}.zip" />
  </target>
	
</project>
